generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model individual {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  video       video[]
}

model team_member {
  id                                        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                   String?  @db.Uuid
  content_creator_id                        String?  @db.Uuid
  created_at                                DateTime @default(now()) @db.Timestamp(6)
  updated_at                                DateTime @default(now()) @db.Timestamp(6)
  user_team_member_content_creator_idTouser user?    @relation("team_member_content_creator_idTouser", fields: [content_creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_team_member_user_idTouser            user?    @relation("team_member_user_idTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                            String        @unique @db.VarChar(255)
  firstName                                        String?       @db.VarChar(255)
  lastName                                         String?       @db.VarChar(255)
  roq_user_id                                      String        @db.VarChar(255)
  tenant_id                                        String        @db.VarChar(255)
  created_at                                       DateTime      @default(now()) @db.Timestamp(6)
  updated_at                                       DateTime      @default(now()) @db.Timestamp(6)
  individual                                       individual[]
  team_member_team_member_content_creator_idTouser team_member[] @relation("team_member_content_creator_idTouser")
  team_member_team_member_user_idTouser            team_member[] @relation("team_member_user_idTouser")
}

model video {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file_path     String      @db.VarChar(255)
  individual_id String?     @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  individual    individual? @relation(fields: [individual_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
